# This is the new, architecturally sound serverless.yml

org: orgg1
service: wedding-photo-app
frameworkVersion: '4' # Pin the framework version for stability

provider:
  name: aws
  region: ap-south-1
  # The entire 'ecr' block is REMOVED. GitHub Actions is now responsible for building.

  # The IAM role is updated to use CloudFormation intrinsic functions.
  # This makes it robust and allows it to work with the auto-named S3 bucket.
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action: ["rekognition:IndexFaces", "rekognition:SearchFacesByImage"]
          Resource: "arn:aws:rekognition:ap-south-1:459858848789:collection/*"
        - Effect: "Allow"
          Action: ["s3:GetObject"]
          # This now correctly references the logical bucket resource defined below.
          Resource: { "Fn::Join": ["", [{ "Fn::GetAtt": ["WeddingPhotosBucket", "Arn"] }, "/*"]] }
        - Effect: "Allow"
          Action: ["dynamodb:PutItem", "dynamodb:GetItem", "dynamodb:UpdateItem"]
          Resource: 
            - "arn:aws:dynamodb:ap-south-1:459858848789:table/Photos"
            - "arn:aws:dynamodb:ap-south-1:459858848789:table/Weddings"
            - "arn:aws:dynamodb:ap-south-1:459858848789:table/GuestSessions"

functions:
  processImage:
    # This section is COMPLETELY REFACTORED.
    # It no longer builds an image. It points to the pre-built image URI
    # passed in from the GitHub Actions workflow.
    image:
      uri: ${param:imageUri} 
    events:
      - s3:
          # This now references the logical resource name of the bucket.
          # The 'Ref' function gets the bucket's actual name at deploy time.
          bucket: { Ref: WeddingPhotosBucket }
          event: s3:ObjectCreated:*
          rules:
            - prefix: wedding-photos/

resources:
  Resources:
    # THIS IS THE NEW, CORRECT WAY TO DEFINE THE BUCKET.
    # We give it a logical name ('WeddingPhotosBucket').
    # By NOT specifying a 'BucketName', we command AWS to generate a unique one.
    WeddingPhotosBucket:
      Type: AWS::S3::Bucket
      Properties:
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    # Your DynamoDB table definitions are fine, so they remain unchanged.
    WeddingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Weddings
        AttributeDefinitions:
          - AttributeName: WeddingID
            AttributeType: S
        KeySchema:
          - AttributeName: WeddingID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    PhotosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Photos
        AttributeDefinitions:
          - AttributeName: ImageKey
            AttributeType: S
        KeySchema:
          - AttributeName: ImageKey
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    GuestSessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: GuestSessions
        AttributeDefinitions:
          - AttributeName: SessionID
            AttributeType: S
        KeySchema:
          - AttributeName: SessionID
            KeyType: HASH 
        TimeToLiveSpecification:
          AttributeName: ExpiresAt
          Enabled: true
        BillingMode: PAY_PER_REQUEST